#!/afs/cats.ucsc.edu/courses/cse112-wm/usr/racket/bin/mzscheme -qr
;; $Id: mbir.scm,v 1.9 2021-01-12 11:57:59-08 - - $
;;
;; NAME
;;    mbir.scm filename.mbir
;;
;; SYNOPSIS
;;    mbir.scm - mini basic interper
;;
;; DESCRIPTION
;;    The file mentioned in argv[1] is read and assumed to be an mbir
;;    program, which is the executed.  Currently it is only printed.
;;

;;Given by prof: definig constants
(define *DEBUG* #f)
(define *STDIN* (current-input-port))
(define *STDOUT* (current-output-port))
(define *STDERR* (current-error-port))
(define *ARG-LIST* (vector->list (current-command-line-arguments)))

;;defining Hash tables
(define *stmt-table*     (make-hash))
(define *function-table* (make-hash))
(define *var-table*      (make-hash))
(define *array-table*    (make-hash))
(define *label-table*    (make-hash))

(for-each (lambda (var) (hash-set! *var-table* (car var) (cadr var)))
   `(
        (e    ,(exp 1.0))
        (eof  0.0)
        (nan  ,(/ 0.0 0.0))
        (pi   ,(acos -1.0))
    ))

(for-each
    (lambda (function) (hash-set! *function-table* (car function) (cadr function)))
    `(
        (+     ,+)
        (-     ,-)
        (*     ,*)
        (/     ,/)
        (^     ,expt)
        (sqrt  ,sqrt)
        (sqr   ,sqr)
        (atan  ,atan)
        (exp   ,exp)
        (log10 ,(lambda (x) (/ (log x) (log 10.0))))
        (log   ,log)
        (=     ,=)
        (<     ,<)
        (>     ,>)
        (!=    ,(lambda (a b) (if (not(= a b)) #t #f)))
        (>=    ,>=)
        (<=    ,<=)
        (ceil  ,ceiling)
        (floor ,floor)
        (sin   ,sin)
        (cos   ,cos)
        (tan   ,tan)
        (acos  ,acos)
        (asin  ,asin)
        (abs   ,abs)
        (round ,round)
      ))

;;given: run file
(define *RUN-FILE*
    (let-values
        (((dirname basename dir?)
            (split-path (find-system-path 'run-file))))
        (path->string basename)))

;;given: if we get an error it exits
(define (die list)
    (for-each (lambda (item) (fprintf *STDERR* "~a " item)) list)
    (fprintf *STDERR* "~n")
    (when (not *DEBUG*) (exit 1)))

;;given: for debugging??
(define (dump . args)
    (when *DEBUG*
        (printf "DEBUG:")
        (for-each (lambda (arg) (printf " ~s" arg)) args)
        (printf "~n")))

;;given: exit with error msg
(define (usage-exit)
    (die `("Usage: " ,*RUN-FILE* " [-d] filename")))

;;given: Gets the line number
(define (line-number line)
    (car line))

;;given: Gets the label for the line
(define (line-label line)
    (let ((tail (cdr line)))
         (and (not (null? tail))
              (symbol? (car tail))
              (car tail))))

;;given: ??
(define (line-stmt line)
    (let ((tail (cdr line)))
         (cond ((null? tail) #f)
               ((pair? (car tail)) (car tail))
               ((null? (cdr tail)) #f)
               (else (cadr tail)))))

;;used for debugging
(define (not-implemented function args . nl)
    (printf "(NOT-IMPLEMENTED: ~s ~s)" function args)
    (when (not (null? nl)) (printf "~n")))

;;Evauating the expression
;(define (eval-expr expr)
;   ;;if expr is a number, we return a number
;   (cond ((number? expr) (+ expr 0.0))
;         ;;if expr is a symbol, we return symbol in variable table
;         ((symbol? expr) (hash-ref *var-table* expr 0.0))
;         ;; if its a pair, we look it up in function table
;         ((pair? expr) 
;              (let ((func (hash-ref *function-table* (car expr) #f))
;                   (opnds (map eval-expr (cdr expr))))
;                   ;;if function is not there, there is error, if it is there we apply it
;                  (if (not func) nan
;                      (apply func opnd)))
;         (else nan)))
;)

;;Evauating the expression
(define (eval-expr expr) ;NEED TO FIX THIS FUNCTION
    (cond ((number? expr) (+ expr 0.0))
          ((symbol? expr) (hash-ref *var-table* expr 0.0))
          ((and (pair? expr) (eq? `asub (car expr))) (vector-ref (hash-ref *array-table* (cadr expr) #f) (exact-round (eval-expr (cadr (cdr expr))))))
          ((pair? expr) 
              (let ((func (hash-ref *function-table* (car expr) #f))
                    (opnds (map eval-expr (cdr expr)))
                   (if (not func) nan
                       (apply func opnds))))
          (else nan)))
)

;;default error for eval-expr
(define nan (/ 0.0 0.0))


;; check comments for dim *************************

;;creating a vector and adding to array table
(define (interp-dim args continuation)
    ;;checking if its a number
    (if (number? (caddr (car args))) 
        ;;if it is, add to array table
        (hash-set! *array-table* (cadr (car args)) (make-vector (exact-round (cadr (cdr (car args)) )) 0.0)) 
        ;;else, taking it from variable table and then adding to array table
        (hash-set! *array-table* (cadr (car args)) (make-vector (exact-round (hash-ref *var-table* (caddr (car args)) ) #f)) 0.0)
    )   
    (interp-program continuation))

;;let function
(define (interp-let args continuation)
    ;;setting mem to address part of args
    (let((mem (car args))
        ;;setting expre to the oart after address
        (expre (cadr args)))
        ;;if mem is a symbol, add to variable table
        (cond ((symbol? mem) (hash-set! *var-table* mem (eval-expr expre)))
            ;; if mem is a pair, add to array table
            ((pair? mem)
                (vector-set! (hash-ref *array-table* (cadr mem)) (exact-round (eval-expr (caddr mem))) (eval-expr expre)))))
    (interp-program continuation))


;;goto function
(define (interp-goto args continuation)
    ;;checking if label exists
    (if (hash-ref *label-table* (car args) #f)
          ;; if it does, interpret, otherwise print error
          (interp-program (hash-ref *label-table* (car args) #f))
          (printf "~a~n" "ERROR: Label does not exist")
    )
)


;;if function
(define (interp-if args continuation)
    ;;setting variables
    (let ((relop (car (car args)))
         (expr1 (cadar args))
         (expr2 (caddar args))
         (label (cadr args))
        )
        ;;checking to see if args exists in function tables
        (if ((hash-ref *function-table* relop #f) (eval-expr expr1)
                                                  (eval-expr expr2))
                (interp-program (hash-ref *label-table* label 0.0))
                (interp-program continuation))
        ))



;;print function
(define (interp-print args continuation)
    (define (print item)
        (if (string? item)
            (printf "~a" item)
            (printf " ~a" (eval-expr item))))
    (for-each print args)
    (printf "~n");
    (interp-program continuation))



;;helper function
(define (readnumber)
        (let ((object (read)))
             (cond ((eof-object? object) (hash-set! *var-table* 'eof 1.0))
                   ((number? object) (+ object 0.0))
                   (else (begin (printf "Invalid number: ~a~n" object) (readnumber)))
             )
         ) 
)
;;reads number from input
(define (interp-input args continuation)
    ;;user input x
    (define (get_input x)
        (let ((number (readnumber))) 
             ;;checking to see if x is  symbol or it exists in variable table
             (if (or (symbol? x) (eq? (hash-ref *var-table* 'eof #f) 0.0))
                 ;;if it does, set x and number to variable table
                 (hash-set! *var-table* x number)
                 (nan)
             )
        )
    )
    (for-each get_input args)
    (interp-program continuation))

(for-each (lambda (fn) (hash-set! *stmt-table* (car fn) (cadr fn)))
   `(
        (dim   ,interp-dim)
        (let   ,interp-let)
        (goto  ,interp-goto)
        (if    ,interp-if)
        (print ,interp-print)
        (input ,interp-input)
    ))

(define (interp-program program)
    (when (not (null? program))
          (let ((line (line-stmt (car program)))
                (continuation (cdr program)))
               (if line
                   (let ((func (hash-ref *stmt-table* (car line) #f)))
                        (func (cdr line) continuation))
                   (interp-program continuation)))))




;;lines 168-179 are together as 1 function
;;helper function
(define (get-label line)
        (and (not (null? line))
             (not (null? (cdr line)))
             (cadr line)))

;;scan function
(define (scan-for-labels program)
    ;;if program is not null
    (when (not (null? program))
          (let ((label (get-label (car program))))
                ;;checking if label is a symbol
               (when (symbol? label)
                     ;;if it is, add to label table
                     (hash-set! *label-table* label program)))
          (scan-for-labels (cdr program))))


(define (print-program label program)
    (printf "~s: [~n" label)
    (for-each (lambda (line) (printf "   ~s~n" line)) program)
    (printf "]~n"))


(define (readlist filename)
    (let ((inputfile (open-input-file filename)))
         (if (not (input-port? inputfile))
             (die `(,*RUN-FILE* ": " ,filename ": open failed"))
             (let ((program (read inputfile)))
                  (close-input-port inputfile)
                         program))))

(define (dump-program filename program)
    (define (dump-line line)
        (dump (line-number line) (line-label line) (line-stmt line)))
    (dump *RUN-FILE* *DEBUG* filename)
    (dump program)
    (for-each (lambda (line) (dump-line line)) program))

(define (main arglist)
    (cond ((null? arglist)
                (usage-exit))
          ((string=? (car arglist) "-d")
                (set! *DEBUG* #t)
                (printf "~a: ~s~n" *RUN-FILE* *ARG-LIST*)
                (main (cdr arglist)))
          ((not (null? (cdr  arglist)))
                (usage-exit))
          (else (let* ((mbprogfile (car arglist))
                       (program (readlist mbprogfile)))
                (begin (when *DEBUG* (dump-program mbprogfile program))
                       (scan-for-labels program)
                       (interp-program program))))))

(main *ARG-LIST*)









#!/afs/cats.ucsc.edu/courses/cse112-wm/usr/racket/bin/mzscheme -qr
;; $Id: mbir.scm,v 1.9 2021-01-12 11:57:59-08 - - $
;; 
;;
;; SYNOPSIS
;;    mbir.scm - mini basic interper
;;
;; DESCRIPTION
;;    The file mentioned in argv[1] is read and assumed to be an mbir
;;    program, which is the executed.  Currently it is only printed.
;;

;;Given by prof: definig constants
(define *DEBUG* #f)
(define *STDIN* (current-input-port))
(define *STDOUT* (current-output-port))
(define *STDERR* (current-error-port))
(define *ARG-LIST* (vector->list (current-command-line-arguments)))

;;defining Hash tables
(define *stmt-table*     (make-hash))
(define *function-table* (make-hash))
(define *var-table*      (make-hash))
(define *array-table*    (make-hash))
(define *label-table*    (make-hash))

(for-each (lambda (var) (hash-set! *var-table* (car var) (cadr var)))
   `(
        (e    ,(exp 1.0))
        (eof  0.0)
        (nan  ,(/ 0.0 0.0))
        (pi   ,(acos -1.0))
    ))


(for-each (lambda (var) (hash-set! *function-table* (car var) (cadr var)))
    `(
        
         (+ ,+)
         (- ,-)
         (* ,*)
         (/ ,/)
         (^ , expt)
         (< ,<)
         (> ,>)
         (=, =)
         (<= ,<=)
         (>= ,>=)
         (!= , (lambda (x y) (not (= x y))))
         (abs ,abs)
         (acos ,acos) 
         (asin ,asin) 
         (atan ,atan) 
         (ceil ,ceiling) 
         (cos ,cos)
         (exp ,exp) 
         (floor ,floor)
         (log ,log) 
         (log10 ,(lambda (x) (/ (log x) (log 10.0)))) 
         (round ,round)
         (sin ,sin)
         (sqrt ,sqrt)
         (tan ,tan)
         (trunc, truncate)
        
     )) 

;;given: run file
(define *RUN-FILE*
    (let-values
        (((dirname basename dir?)
            (split-path (find-system-path 'run-file))))
        (path->string basename)))

;;given: if we get an error it exits
(define (die list)
    (for-each (lambda (item) (fprintf *STDERR* "~a " item)) list)
    (fprintf *STDERR* "~n")
    (when (not *DEBUG*) (exit 1)))

;;given: for debugging??
(define (dump . args)
    (when *DEBUG*
        (printf "DEBUG:")
        (for-each (lambda (arg) (printf " ~s" arg)) args)
        (printf "~n")))

;;given: exit with error msg
(define (usage-exit)
    (die `("Usage: " ,*RUN-FILE* " [-d] filename")))

;;given: Gets the line number
(define (line-number line)
    (car line))

;;given: Gets the label for the line
(define (line-label line)
    (let ((tail (cdr line)))
         (and (not (null? tail))
              (symbol? (car tail))
              (car tail))))

;;given: ??
(define (line-stmt line)
    (let ((tail (cdr line)))
         (cond ((null? tail) #f)
               ((pair? (car tail)) (car tail))
               ((null? (cdr tail)) #f)
               (else (cadr tail)))))

;;used for debugging
(define (not-implemented function args . nl)
    (printf "(NOT-IMPLEMENTED: ~s ~s)" function args)
    (when (not (null? nl)) (printf "~n")))

(define (eval-expr expr) ;NEED TO FIX THIS FUNCTION
    (cond ((number? expr) (+ expr 0.0))
          ((symbol? expr) (hash-ref *var-table* expr 0.0))
          ((and (pair? expr) (eq? `asub (car expr))) (vector-ref (hash-ref *array-table* (cadr expr) #f) (exact-round (eval-expr (cadr (cdr expr))))))
          ((pair? expr) 
              (let ((func (hash-ref *function-table* (car expr) #f))
                    (opnds (map eval-expr (cdr expr))))
                   (if (not func) nan
                       (apply func opnds))))
          (else nan)))

(define nan (/ 0.0 0.0))


;; check comments for dim *************************

;;creating a vector and adding to array table
(define (interp-dim args continuation)
    (if (number? (cadr (cdr (car args)) ))  ;;checking if its a number
        (hash-set! *array-table* (cadr (car args)) (make-vector (exact-round (cadr (cdr (car args)) )) 0.0)) ; (dim (asub goat 5))  ;;if it is, add to array table
        (hash-set! *array-table* (cadr (car args)) (make-vector (exact-round (hash-ref *var-table* (cadr (cdr (car args)) ) #f)) 0.0)) ; (dim (asub goat i))  ;;else, taking it from variable table and then adding to array table
    )   
    (interp-program continuation))


;;let function
(define (interp-let args continuation)
    (let((mem (car args))   ;;setting mem to address part of args
        (expre (cadr args)))   ;;setting expre to the oart after address
        (cond ((symbol? mem) (hash-set! *var-table* mem (eval-expr expre)))  ;;if mem is a symbol, add to variable table
            ((pair? mem)   ;; if mem is a pair, add to array table
                (vector-set! (hash-ref *array-table* (cadr mem)) (exact-round (eval-expr (caddr mem))) (eval-expr expre)))))
    (interp-program continuation))


;;goto function
(define (interp-goto args continuation)
    (if (hash-ref *label-table* (car args) #f)   ;;checking if label exists 
          (interp-program (hash-ref *label-table* (car args) #f))   ;; if it does, interpret, otherwise print error
          (printf "~a~n" "ERROR: Label does not exist")
    )
)

;;if function
(define (interp-if args continuation)
    (let ((relop (car (car args)))  ;;setting variables
         (expr1 (cadar args))
         (expr2 (caddar args))
         (label (cadr args))
        )
        (if ((hash-ref *function-table* relop #f) (eval-expr expr1)     ;;checking to see if args exists in function tables
                                                  (eval-expr expr2))
                (interp-program (hash-ref *label-table* label 0.0))
                (interp-program continuation))
        ))






;;print function
(define (interp-print args continuation)
    (define (print item) ; void print( item)
        (if (string? item) ; if (item is a string)
            (printf "~a" item) ; print(item) without quotes in it
            (printf " ~a" (eval-expr item)))) ; else {print the item}
    (for-each print args) 
    (printf "~n")
    (interp-program continuation))


;;helper function
(define (readnumber)
        (let ((object (read)))
             (cond [(eof-object? object) (hash-set! *var-table* 'eof 1.0)]
                   [(number? object) (+ object 0.0)]
                   [else (begin (printf "Invalid number: ~a~n" object) (readnumber))] 
             )
         ) 
)

;;reads number from input
(define (interp-input args continuation)
    (define (get_input x)   ;;user input x
        (let ((number (readnumber))) ; (input a b c)
             (if (or (symbol? x) (eq? (hash-ref *var-table* 'eof #f) 0.0))    ;;checking to see if x is  symbol or it exists in variable table
                 (hash-set! *var-table* x number)   ;;if it does, set x and number to variable table
                 (nan)
             )
        )
    )
    (for-each get_input args)
    (interp-program continuation))



(for-each (lambda (fn) (hash-set! *stmt-table* (car fn) (cadr fn)))
   `(
        (dim   ,interp-dim)
        (let   ,interp-let)
        (goto  ,interp-goto)
        (if    ,interp-if)
        (print ,interp-print)
        (input ,interp-input)
    ))



(define (interp-program program)
    (when (not (null? program))
          (let ((line (line-stmt (car program)))
                (continuation (cdr program)))
               (if line
                   (let ((func (hash-ref *stmt-table* (car line) #f)))
                        (func (cdr line) continuation))
                   (interp-program continuation)))))





;;helper function
(define (get-label line)
        (and (not (null? line))
             (not (null? (cdr line)))
             (cadr line)))

;;scan function
(define (scan-for-labels program)
    (when (not (null? program))
          (let ((label (get-label (car program))))
               (when (symbol? label)
                     (hash-set! *label-table* label program)))
          (scan-for-labels (cdr program))))



(define (print-program label program)
    (printf "~s: [~n" label)
    (for-each (lambda (line) (printf "   ~s~n" line)) program)
    (printf "]~n"))


(define (readlist filename)
    (let ((inputfile (open-input-file filename)))
         (if (not (input-port? inputfile))
             (die `(,*RUN-FILE* ": " ,filename ": open failed"))
             (let ((program (read inputfile)))
                  (close-input-port inputfile)
                         program))))

(define (dump-program filename program)
    (define (dump-line line)
        (dump (line-number line) (line-label line) (line-stmt line)))
    (dump *RUN-FILE* *DEBUG* filename)
    (dump program)
    (for-each (lambda (line) (dump-line line)) program))

(define (main arglist)
    (cond ((null? arglist)
                (usage-exit))
          ((string=? (car arglist) "-d")
                (set! *DEBUG* #t)
                (printf "~a: ~s~n" *RUN-FILE* *ARG-LIST*)
                (main (cdr arglist)))
          ((not (null? (cdr  arglist)))
                (usage-exit))
          (else (let* ((mbprogfile (car arglist))
                       (program (readlist mbprogfile)))
                (begin (when *DEBUG* (dump-program mbprogfile program))
                       (scan-for-labels program)
                       (interp-program program))))))

(main *ARG-LIST*)

